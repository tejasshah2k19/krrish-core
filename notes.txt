take file name and location from user. 
check files is present or not. 
if present and file size is 0 byte then remove it.
if not present then create it.
-----------------------------------------------
ask directory name to user , list out all files and folders name from that directory.
1)count how many total files and directory present 
2)count total number of java file present in directory 
-----------------------------------------------

to read and write inside file we have two option

			1) byte 					
 InputStream[r]      OutputStream[w] 
 FileInputStream	FileOutputStream 
 
 
 			2) character 
 Reader[r]				Writer[w]
 FileReader				FileWriter 
 
 
Take name from user and store into names.txt 

create 1 file country.txt , input three country name in country.txt 
now read country name from country.txt if country name starts with 'a' 'e' 'i' 'o' 'u' then write that
country name inside special country name.txt. 



task:
Take 10 numbers from user, store into numbers.txt 
now read numbers.txt , if number is odd then store into odd.txt , even then store into even.txt 

final output 

numbers.txt 
1 2 3 4 5 5 7 8 9 10 
odd.txt
1 3 5 7 9 
even.txt
2 4 6 8 10 



-----------------------------------------------
nio - new io - non blocking io 

Files 
Paths 
Path 


*)take file name from user and create that file in 
c drive temp folder.
*) take file name from user copy content of that file into
	backup.txt file 
	
---------------------------------------------------------------------------

Executor
Executors
ExecutorService 
ThreadFactory* 
1) FixedThreadPool - 5
2) CachedThreadPool - 2--n 
3) SingleThreadPool - 1 
4) ScheduleThreadPool 



class : ThreadPlayer

player can play game , player has 3 life. 
you have to create Game class which initialize player 

also we need to create two thread 1 is used to kill player  so life of player decrease. 

2nd thread will check game over status if life == 0 and 
player kill then need to display game over. 



conc --> thread pool --> 
			execute() - void 
			submit() - Future 
			

-----
using callable :-
	we have two thread 1 from ThreadArraySum { int a[] => 5}
					   2 from ThreadArrayListSum {ArrayList v => 5 } 
				ThreadArraySum having array of five numbers 
				ThreadVectorSum having ArrayList of five numbers 
				they both find sum of five numbers. 
				now you have to add ThreadArraySum + ThreadArrayListSum 
				
				no join no wait no synchronized 
				
				
				
--------------------------------------------------
1 to 100 sum -> 1 second 
5 time repeat  => 1 second 

1 to 1000 sum -> 10 second 

1 to 500 -> 5 second 
501 to 1000 -> 5 second 

process -> split --> execute -> conc 
fork [ split ]
join [ merge ] 

----------------------

inner class 

1) class inside class - inner class 
2) class inside method - method local inner class
3) static class inside class - nested class 
4) class - no name - Anonymous inner class  


--------------------------------------------------------------------
100 num 
array 

int a[] = new int[100]; //100 

increase 

descrease 
-------------
100 users --> User 

array of objects 
increase 

descrease 


amazon 
=> led tv -> 200tvs-> product 

=> iphone 13 -> 25 iphone -> product  

=> tv -> 1000's -> product 
-------------------------------------------------------------------------------------
collection 

objects --> dynamic 
10
150
130


collection --topics 

interface classes 


Collection - interface 
Collections - class 
Arrays - class : sort binarySearch  


					Collection(I)

List(I)				Queue(I)				Set(I)          |        Map(I)
ArrayList(C)		PriorityQueue(C)		HashSet(C)				HashMap(C)
Vector	(C)									TreeSet(C)				TreeMap(C) 




1	unique 
2	duplicate
3	sorted 
4	unsorted 
5	ordered 
6	un-ordered 




ArrayList : ordered , duplicate , index access 

1) take 5 numbers from user and store into ArrayList - 
	1.1) find sum of 5 numbers 
	1.2) find max num from 5 numbers 
	
Vector  : 


List -> ArrayList , Vector{ordered , duplicate , index access}
sync. 


PriorityQueue : duplicate , unordered but you can ask for asc via poll and peek 
	
	
	Set -> unique 
HashSet : unordered  
TreeSet : sorted 

-------------------------------------
Telephone Diary 


We need to create one diary app for user.
when user open app it display menu for operation 
e.g

1 Add new Contact
2 Edit Contact
3 Search Contact 
4 Remove Contact 
5 Exit From App 


1 Add contact will add new contact in app. we need to store first name last name and phone number of user. 
2 Edit contact will modify user info.  user can search via firstname once user found then only edit function will work
3 when user want to contact any person user can use this functionality, he can add first name of user and your app will list all users with matching first name 
4  remove contact will remove contact from app user can remove contact via first name , if multiple user found then app need to confirm which user need to be deleted , you have to manage this by your own way 
5 exit :) 


-------------------------------------
Map -> HashMap 
	   TreeMap 

	key : value 
	name : ram 
	
	product1:{
		name:tv 55 sony, 
		brand:sony ,
		price:1500
	}

	key always unique , value duplicate. 
	












 
 
 
  